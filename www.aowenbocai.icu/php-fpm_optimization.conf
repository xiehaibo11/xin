# PHP-FPM优化配置
# 基于压力测试结果的性能调优

[global]
; 全局配置
pid = /www/server/php/74/var/run/php-fpm.pid
error_log = /www/server/php/74/var/log/php-fpm.log
log_level = warning
emergency_restart_threshold = 10
emergency_restart_interval = 1m
process_control_timeout = 10s
daemonize = yes

[www]
; 主进程池配置
user = www
group = www

; 监听配置
listen = 127.0.0.1:9000
listen.backlog = 511
listen.owner = www
listen.group = www
listen.mode = 0660

; 进程管理配置 (基于测试结果优化)
pm = dynamic
pm.max_children = 50        ; 最大子进程数 (从5增加到50)
pm.start_servers = 10       ; 启动时的进程数 (从2增加到10)
pm.min_spare_servers = 5    ; 最小空闲进程数
pm.max_spare_servers = 20   ; 最大空闲进程数 (从3增加到20)
pm.max_requests = 1000      ; 每个子进程处理的最大请求数

; 进程超时配置
request_terminate_timeout = 60s
request_slowlog_timeout = 30s
slowlog = /www/server/php/74/var/log/slow.log

; 状态监控
pm.status_path = /status
ping.path = /ping
ping.response = pong

; 内存和资源限制
rlimit_files = 65535
rlimit_core = 0

; 环境变量
env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp

; 安全配置
security.limit_extensions = .php .php3 .php4 .php5 .php7

; 日志配置
access.log = /www/server/php/74/var/log/access.log
access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

; 高并发优化配置
[high_concurrency]
user = www
group = www
listen = 127.0.0.1:9001
listen.backlog = 1024

; 专门处理高并发请求的进程池
pm = dynamic
pm.max_children = 100       ; 高并发池最大进程数
pm.start_servers = 20       ; 启动进程数
pm.min_spare_servers = 10   ; 最小空闲进程
pm.max_spare_servers = 30   ; 最大空闲进程
pm.max_requests = 500       ; 更频繁的进程回收

; 更短的超时时间
request_terminate_timeout = 30s
request_slowlog_timeout = 15s
slowlog = /www/server/php/74/var/log/high_concurrency_slow.log

; API专用进程池
[api]
user = www
group = www
listen = 127.0.0.1:9002
listen.backlog = 512

; API专用优化
pm = dynamic
pm.max_children = 30
pm.start_servers = 8
pm.min_spare_servers = 5
pm.max_spare_servers = 15
pm.max_requests = 2000      ; API请求通常更轻量

; API专用超时配置
request_terminate_timeout = 45s
request_slowlog_timeout = 20s
slowlog = /www/server/php/74/var/log/api_slow.log

; 游戏服务专用进程池
[game]
user = www
group = www
listen = 127.0.0.1:9003
listen.backlog = 256

; 游戏服务优化 (需要更长的处理时间)
pm = dynamic
pm.max_children = 20
pm.start_servers = 5
pm.min_spare_servers = 3
pm.max_spare_servers = 10
pm.max_requests = 100       ; 游戏请求可能更复杂，更频繁回收

; 游戏服务超时配置
request_terminate_timeout = 120s    ; 游戏逻辑可能需要更长时间
request_slowlog_timeout = 60s
slowlog = /www/server/php/74/var/log/game_slow.log

; 管理后台专用进程池
[admin]
user = www
group = www
listen = 127.0.0.1:9004
listen.backlog = 128

; 管理后台优化
pm = dynamic
pm.max_children = 10        ; 管理后台并发较低
pm.start_servers = 3
pm.min_spare_servers = 2
pm.max_spare_servers = 5
pm.max_requests = 500

; 管理后台超时配置
request_terminate_timeout = 90s     ; 管理操作可能需要更长时间
request_slowlog_timeout = 45s
slowlog = /www/server/php/74/var/log/admin_slow.log

; 系统监控和调试配置
[monitor]
; 启用详细的进程状态监控
pm.status_path = /fpm-status
ping.path = /fpm-ping
ping.response = pong

; 详细的访问日志
access.log = /www/server/php/74/var/log/fpm-access.log
access.format = "%R - %u %t \"%m %r\" %s %f %{mili}d %{kilo}M %C%% [pool:%n]"

; 性能调优建议
; 1. 根据服务器内存调整 pm.max_children
;    公式: pm.max_children = 可用内存 / 平均PHP进程内存
;    当前配置: 4GB内存，预留1GB系统，3GB/20MB ≈ 150个进程
;
; 2. 监控进程池状态
;    访问 http://domain.com/status 查看进程池状态
;
; 3. 根据实际负载调整各个进程池的配置
;    - 高并发时段增加 high_concurrency 池的进程数
;    - 游戏活跃时段增加 game 池的进程数
;
; 4. 定期检查慢日志
;    tail -f /www/server/php/74/var/log/slow.log
;
; 5. 使用系统监控工具
;    htop, iotop, netstat 等监控系统资源使用情况
